#!/usr/bin/python
from __future__ import annotations

from typing import Optional, Text, List, Sequence, Tuple
from fastapi import FastAPI, File
import uvicorn

from clu.phontools.info import info

from clu.phontools.struct import *
from clu.phontools.lang.en import EnglishUtils
from clu.phontools.alignment.realine import ReAline, PhonemeErrors
from clu.phontools.alignment.lbe import calculate_lbes_from_stress, LexicalBoundaryError

from pydantic import BaseModel
import yaml
import os
import argparse
import logging


class APIConfig(BaseModel):
    host: Text = "0.0.0.0"
    port: int = 8000

    @staticmethod
    def from_file(config_file: Text) -> "APIConfig":
        """
        Loads a conf instance from a YAML file
        """
        cfp = os.path.abspath(config_file)
        with open(cfp) as f:
            return APIConfig.from_str(config=f.read())

    @staticmethod
    def from_str(config: Text) -> "APIConfig":
        """
        Loads a conf instance based on the contents (str) of a YAML config file
        """
        config_dict = yaml.load(config, Loader=yaml.FullLoader).get("phontools")

        conf = APIConfig(host=config_dict["host"], port=config_dict["port"])

        return conf


# Host and port from conf, possibly debug? logging

if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument("-c", "--config", help="yaml config file")
    args = parser.parse_args()

    # read `spacy:` block from YAML
    conf = APIConfig() if not args.config else APIConfig.from_file(args.config)

    server = FastAPI()

    example_target: Sequence[Text] = [
        "æ",
        "d",
        "v",
        "æ",
        "n",
        "s",
        "b",
        "ʌ",
        "t",
        "æ",
        "t",
        "ə",
        "p",
        "i",
        "l",
    ]
    example_transcript: Sequence[Text] = [
        "æ",
        "d",
        "v",
        "æ",
        "n",
        "s",
        "b",
        "ʌ",
        "t",
        "s",
        "ɛ",
        "t",
        "ə",
        "i",
        "l",
    ]
    example_alignment: Sequence[Tuple[Text, Text]] = [
        ("æ", "æ"),
        ("d", "d"),
        ("v", "v"),
        ("æ", "æ"),
        ("n", "n"),
        ("s", "s"),
        ("b", "b"),
        ("ʌ", "ʌ"),
        ("t", "t"),
        ("-", "s"),
        ("æ", "ɛ"),
        ("t", "t"),
        ("ə", "ə"),
        ("p", "-"),
        ("i", "i"),
        ("l", "l"),
    ]

    @server.post(
        "/api/clu/phontools/lang/en/word/pronounce/arpabet",
        response_model=Sequence[Word],
    )
    def lookup_pronunciations_for_word(word: Text) -> Sequence[Word]:
        """Find all possible pronunciations for the provided word"""
        return EnglishUtils.all_possible_forms_for(word)

    @server.post(
        "/api/clu/phontools/lang/en/word/stress-patterns",
        response_model=Sequence[Sequence[Stress]],
    )
    def lookup_stress_patterns_for_word(word: Text) -> Sequence[Sequence[Stress]]:
        """Find all possible stress patterns for the provided word"""
        return [
            word.pf.stress_pattern for word in EnglishUtils.all_possible_forms_for(word)
        ]

    @server.post(
        "/api/clu/phontools/lang/en/word/coarse-stress-patterns",
        response_model=Sequence[Sequence[CoarseStress]],
    )
    def lookup_coarse_stress_patterns_for_word(
        word: Text,
    ) -> Sequence[Sequence[CoarseStress]]:
        """Find all possible stress patterns for the provided word"""
        return [
            word.pf.coarse_stress_pattern
            for word in EnglishUtils.all_possible_forms_for(word)
        ]

    @server.post(
        "/api/clu/phontools/lang/en/phrase/pronounce/arpabet",
        response_model=Sequence[Phrase],
    )
    def lookup_pronunciations_for_phrase(words: Sequence[Text]) -> Sequence[Phrase]:
        """Find all possible pronunciations for the provided words"""
        return EnglishUtils.all_possible_phrases_for(words)

    @server.post(
        "/api/clu/phontools/alignment/re-aline/align",
        response_model=Sequence[Tuple[Text, Text]],
    )
    def align_via_realine(
        target: Sequence[Text] = example_target,
        transcript: Sequence[Text] = example_transcript,
        epsilon: float = 0,
    ):
        """Aligns a gold (target) and transcript using re-aline."""
        aligner = ReAline()
        return aligner.align(seq1=target, seq2=transcript, epsilon=epsilon)

    @server.post(
        "/api/clu/phontools/alignment/re-aline/phoneme-errors",
        response_model=PhonemeErrors,
    )
    def realine_phoneme_errors(
        alignment: Sequence[Tuple[Text, Text]] = example_alignment
    ):
        """Computes phoneme errors in terms of insertions, deletions, and substitutions."""
        aligner = ReAline()
        return aligner.phoneme_errors(alignment)

    @server.post(
        "/api/clu/phontools/alignment/lbe/from-stress",
        response_model=Sequence[LexicalBoundaryError],
    )
    def lbes_from_stress(
        target: Sequence[Text] = ["SW", "S", "W", "SW"],
        transcript: Sequence[Text] = ["X", "X", "X", "X", "XX"],
    ) -> Sequence[Phrase]:
        """Find lexical boundary errors for two stress sequences"""
        return calculate_lbes_from_stress(target, transcript)

    @server.get("/api/version", response_model=Text)
    async def version():
        """
        App version
        """
        return info.version

    @server.get("/api/info")
    async def app_info():
        """
        App info
        """
        return info

    # Run server
    uvicorn.run(server, port=conf.port, host=conf.host)
